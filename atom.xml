<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sallymjzhou</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-12T07:32:30.002Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Sally Zhou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>好好读红宝书之第4章：变量、作用域与内存</title>
    <link href="http://example.com/2022/06/30/pro-javascript-chapter4/"/>
    <id>http://example.com/2022/06/30/pro-javascript-chapter4/</id>
    <published>2022-06-30T15:12:56.000Z</published>
    <updated>2022-07-12T07:32:30.002Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>换个方式，开头写总结，如果已熟练掌握本章知识点的话，就看到这里吧 ☺️</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JavaScript 变量可以保存两种类型的值：<strong>原始值</strong>和<strong>引用值</strong>。<strong>原始值</strong>可能是以下 7 种原始数据类型之一：<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Symbol</code> 和 <code>BigInt</code>。原始值和引用值有以下特点。</p><ul><li><p><strong>原始值</strong>大小固定，因此保存在<strong>栈内存</strong>上。</p></li><li><p><strong>引用值</strong>是对象，存储在<strong>堆内存</strong>上。</p></li><li><p>包含引用值的变量实际上只包含指向相应对象的一个指针，而不是对象本身。</p></li><li><p>从一个变量到另一个变量复制原始值会创建该值的第二个副本，从一个变量到另一个变量复制引用值只会复制指针，因此结果是两个变量都指向同一个变量。</p></li><li><p><code>typeof</code> 操作符可以确定值的原始类型（除了<code>null</code>），而<code>instanceof</code> 操作符用于确保值的引用类型。更确切地说，<code>typeof</code> 是判断<code>undefined</code>、字符串、数值、布尔值、<code>Symbol</code> 和 <code>BigInt</code> 的最好方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// object</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>; <span class="hljs-comment">// undefined</span><br><br><span class="hljs-keyword">let</span> x = <span class="hljs-title class_">BigInt</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_SAFE_INTEGER</span>);<br><span class="hljs-keyword">typeof</span> x; <span class="hljs-comment">// bigint</span><br><br><span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>date <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Date</span>; <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>ECMAScript 中所有函数的参数都是<strong>按值传递</strong>的。举个栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> color = <span class="hljs-string">&quot;Black&quot;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">changeColor</span>(<span class="hljs-params">color</span>) &#123;<br>color = <span class="hljs-string">&quot;Pink&quot;</span>;<br>&#125;<br><br><span class="hljs-title function_">changeColor</span>(color);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(color); <span class="hljs-comment">// Black</span><br></code></pre></td></tr></table></figure></li></ul><p>任何变量（不管包含的是原始值还是引用值）都存在于某个执行上下文中（也称为作用域）。这个上下文（作用域）决定了变量的生命周期，以及它们可以访问代码的那些部分。执行上下文可以总结如下。</p><ul><li>执行上下文分<strong>全局上下文</strong>、<strong>函数上下文</strong>和<strong>块级上下文</strong>。</li><li>代码执行流每进入一个新上下文，都会创建一个作用域链，用于搜索变量和函数。</li><li><strong>函数或块的局部上下文</strong>不仅可以访问自己作用域内的变量，而且也可以访问任何包含本上下文乃至全局上下文中的变量。</li><li><strong>全局上下文</strong>只能访问全局上下文中的变量和函数，不能直接访问局部上下文中的任何数据。</li><li><strong>变量</strong>的执行上下文用于确定什么时候释放内存。</li></ul><p>JavaScript 是使用<strong>垃圾回收</strong>的编程语言，开发者不需要操心内存分配和回收。JavaScript 的垃圾回收程序可以总结如下。</p><ul><li>离开作用域的值会被自动标记为可回收，然后在垃圾回收期间被删除。</li><li>主流的垃圾回收算法是<strong>标记清理</strong>，即先给当前不使用的值加上标记，再回来回收它们的内存。</li><li><strong>引用计数</strong>是另一种垃圾回收策略，需要记录值被引用了多少次。但这种策略会在代码中存在循环引用时会出现问题。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;换个方式，开头写总结，如果已熟练掌握本章知识点的话，就看到这里吧 ☺️&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;</summary>
      
    
    
    
    
    <category term="基础" scheme="http://example.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>理解CSS盒模型</title>
    <link href="http://example.com/2022/06/29/css-box/"/>
    <id>http://example.com/2022/06/29/css-box/</id>
    <published>2022-06-29T14:44:07.000Z</published>
    <updated>2022-07-10T16:02:23.008Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>CSS 盒模型描述了以文档树中的元素而生成的矩形框，并根据排版模式进行布局。每个盒子都有一个内容区域<code>content</code>（例如文本，图像等）以及周围可选的<code>padding</code>、<code>border</code>和<code>margin</code>区域。盒的每个部分 margin, border, padding and content 合在一起就可以创建我们在页面上看到的内容。为了增加一些额外的复杂性，有一个标准的和替代&#x2F;怪异（IE）的盒模型。<br>下图可以很好的说明 CSS 的盒子模型：<br><img src="https://github.com/sallyrubyjade/pics/blob/main/data/box-model.jpeg?raw=true" alt="CSS Box Model"></p><ul><li><code>margin</code> <strong>外边距</strong>：外边距是盒子周围一圈看不到的空间。它会把其他元素从盒子旁边推开。</li><li><code>border</code> <strong>边框</strong>：边框是在边距和填充框之间绘制的。如果您正在使用标准的盒模型，边框的大小将添加到框的宽度和高度。如果您使用的是替代盒模型，那么边框的大小会使内容框更小，因为它会占用一些可用的宽度和高度。</li><li><code>padding</code> <strong>内边距</strong>：内边距位于边框和内容区域之间。与外边距不同，您不能有负数量的内边距，所以值必须是 0 或正的值。应用于元素的任何背景都将显示在内边距后面，内边距通常用于将内容推离边框。</li><li><code>contnet</code> <strong>内容</strong>：即盒子中存放文本或图片的区域。</li></ul><h2 id="W3C-标准盒模型"><a href="#W3C-标准盒模型" class="headerlink" title="W3C 标准盒模型"></a>W3C 标准盒模型</h2><p>在标准盒模型中，如果你给盒设置<code>width</code> 和 <code>height</code>，实际上设置的是<strong>content box</strong>。<code>padding</code> 和 <code>border</code> 再加上设置的宽高一起决定盒子的大小。</p><p>假设定义了 <code>width</code>, <code>height</code>, <code>margin</code>, <code>border</code>, 和 <code>padding</code>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">350px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">25px</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">25px</span>;<br><span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> solid black;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果使用标准盒模型宽度&#x3D; <code>width</code> + <code>padding-left</code> + <code>padding-right</code> + <code>border-left</code> +<code>border-left</code> &#x3D; 410px (350 + 25 + 25 + 5 + 5)，<strong>padding</strong> 加 <strong>border</strong> 再加 <strong>content box</strong>。</p><p><img src="https://github.com/sallyrubyjade/pics/blob/main/data/standard-box-model.png?raw=true" alt="Standard Box Model"></p><h2 id="IE-盒模型"><a href="#IE-盒模型" class="headerlink" title="IE 盒模型"></a>IE 盒模型</h2><p>你可能会认为盒子的大小还要加上边框和内边距，这样很麻烦，而且你的想法是对的 ! 因为这个原因，css 还有一个替代盒模型。默认浏览器会使用标准模型。如果需要使用替代模型，您可以通过为其设置 <code>box-sizing: border-box</code> 来实现。 这样就可以告诉浏览器使用 <code>border-box</code> 来定义区域，从而设定您想要的大小。使用这个模型，所有宽度都是可见宽度，<strong>所以内容宽度是该宽度减去边框和填充部分</strong>。使用上面相同的样式得到 (width &#x3D; 350px, height &#x3D; 150px).</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br><span class="hljs-attribute">box-sizing</span>: border-box;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">350px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">25px</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">25px</span>;<br><span class="hljs-attribute">border</span>: <span class="hljs-number">5px</span> solid black;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://github.com/sallyrubyjade/pics/blob/main/data/alternate-box-model.png?raw=true" alt="IE Box Model"></p><h2 id="更直观的对比"><a href="#更直观的对比" class="headerlink" title="更直观的对比"></a>更直观的对比</h2><p><img src="https://github.com/sallyrubyjade/pics/blob/main/data/box-comparison.png?raw=true" alt="Two Box Models"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>盒模型由四个部分组成，分别是<code>margin</code>、<code>border</code>、<code>padding</code>、<code>content</code>，（即外边距，边框，内边距，内容），合在一起就可以创建我们在页面上看到的内容。它有标准盒模型和 IE 盒模型两种：</p><p>标准盒模型和 IE 盒模型的区别在于设置 <code>width</code> 和 <code>height</code> 时，所对应的范围不同。标准盒模型的 width 和 height 属性的范围只包含了 content，而 IE 盒模型的 width 和 height 属性的范围包含了 border、padding 和 content。</p><p>默认浏览器会使用标准盒模型。如果需要使用替代模型，您可以通过改变 <code>box-sizing</code> 属性来实现，设置为 <code>box-sizing: border-box</code>。</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/The_box_model">MDN 盒模型</a></li><li><a href="https://juejin.cn/post/6844904117249261576">两种盒模型分别说一下</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;CSS 盒模型描述了以文档树中的元素而生成的矩形框，并根据排版模式进行布局。每个盒子都有一个内容区域&lt;code&gt;content&lt;/code&gt;</summary>
      
    
    
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
    <category term="基础" scheme="http://example.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="http://example.com/2022/02/20/hello-world/"/>
    <id>http://example.com/2022/02/20/hello-world/</id>
    <published>2022-02-20T05:30:03.510Z</published>
    <updated>2022-07-10T15:26:10.255Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is my very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info.<br>这里记录了 Hexo 博客的常用命令和操作指南。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean &amp;&amp; hexo s<br></code></pre></td></tr></table></figure><h3 id="推送远程"><a href="#推送远程" class="headerlink" title="推送远程"></a>推送远程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is my very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for m</summary>
      
    
    
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
